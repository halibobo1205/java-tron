plugins {
    id "org.gradle.test-retry" version "1.5.9"
    id "org.sonarqube" version "2.6"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

gitProperties.failOnNoGitDirectory = false;

apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'org.tron.program.FullNode'

def versions = [
        checkstyle: '8.7',
]



configurations {
    checkstyleConfig

}

configurations.named('checkstyleConfig') {
    transitive = false
}

static def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

tasks.register('version', Exec) {
    commandLine 'bash', '-c', '../ver.sh'
}

dependencies {
    //local libraries
    implementation fileTree(dir: 'libs', include: '*.jar')
    // end local libraries
    testImplementation group: 'org.hamcrest', name: 'hamcrest-junit', version: '1.0.0.1'

    implementation group: 'com.google.inject', name: 'guice', version: '4.1.0'
    implementation group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.2'
    implementation group: 'com.github.davidb', name: 'metrics-influxdb', version: '0.8.2'
    // http
    implementation 'org.eclipse.jetty:jetty-server:9.4.53.v20231009'
    implementation 'org.eclipse.jetty:jetty-servlet:9.4.53.v20231009'
    implementation 'com.alibaba:fastjson:1.2.83'
    // end http

    // https://mvnrepository.com/artifact/com.github.briandilley.jsonrpc4j/jsonrpc4j
    implementation group: 'com.github.briandilley.jsonrpc4j', name: 'jsonrpc4j', version: '1.6'

    // https://mvnrepository.com/artifact/javax.portlet/portlet-api
    compileOnly group: 'javax.portlet', name: 'portlet-api', version: '3.0.1'

    implementation "io.vavr:vavr:0.9.2"
    implementation group: 'org.pf4j', name: 'pf4j', version: '3.10.0',{
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    testImplementation group: 'org.springframework', name: 'spring-test', version: '5.2.0.RELEASE'
    testImplementation group: 'org.springframework', name: 'spring-web', version: '5.2.0.RELEASE'

    implementation group: 'org.zeromq', name: 'jeromq', version: '0.5.3'
    api project(":chainbase")
    api project(":protocol")
    api project(":actuator")
    api project(":consensus")
}

check.dependsOn 'lint'

checkstyle {
    toolVersion = "${versions.checkstyle}"
    configFile = file("config/checkstyle/checkStyleAll.xml")
}


checkstyleMain {
    source = 'src/main/java'
}

tasks.register('lint', Checkstyle) {
    // Cleaning the old log because of the creation of the new ones (not sure if totaly needed)
    delete fileTree(dir: "${project.rootDir}/app/build/reports")
    source 'src'
    include '**/*.java'
    exclude 'main/gen/**'
    exclude 'test/**'
    // empty classpath
    classpath = files()
    //Failing the build
    ignoreFailures = false
}

tasks.matching { it instanceof Test }.configureEach {
    testLogging.events = ["failed", "passed", "skipped"]
}

if (project.hasProperty("mainClass")) {
    mainClassName = mainClass
}

run {
    if (project.hasProperty('witness')) {
        standardInput = System.in
        args = ['--witness']
    }
}

test {
    retry {
        maxRetries = 5
        maxFailures = 20
    }
    testLogging {
        exceptionFormat = 'full'
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
    if (isWindows()) {
        exclude '**/ShieldedTransferActuatorTest.class'
        exclude '**/BackupDbUtilTest.class'
        exclude '**/ManagerTest.class'
        exclude 'org/tron/core/zksnark/**'
        exclude 'org/tron/common/runtime/vm/PrecompiledContractsVerifyProofTest.class'
        exclude 'org/tron/core/ShieldedTRC20BuilderTest.class'
        exclude 'org/tron/common/runtime/vm/WithdrawRewardTest.class'
    }
    maxHeapSize = "1024m"
    doFirst {
        forkEvery = 100
        jvmArgs "-XX:MetaspaceSize=128m","-XX:MaxMetaspaceSize=256m", "-XX:+UseG1GC"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    getExecutionData().setFrom(fileTree('../framework/build/jacoco').include("**.exec"))
}

def createScript(project, mainClass, name) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        unixStartScriptGenerator.template = resources.text.fromFile('../gradle/unixStartScript.txt')
        windowsStartScriptGenerator.template = resources.text.fromFile('../gradle/windowsStartScript.txt')
        outputDir = new File(project.buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtimeClasspath
//        defaultJvmOpts = ['-XX:+UseConcMarkSweepGC',
//                          '-XX:+PrintGCDetails',
//                          '-Xloggc:./gc.log',
//                          '-XX:+PrintGCDateStamps',
//                          '-XX:+CMSParallelRemarkEnabled',
//                          '-XX:ReservedCodeCacheSize=256m',
//                          '-XX:+CMSScavengeBeforeRemark'
//        ]
    }
    project.tasks[name].dependsOn(project.jar)
    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}
if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
    applicationDistribution.from("${project.rootDir}/gradle/jdk17/java-tron.vmoptions") {
        into "bin"
    }
} else {
    applicationDistribution.from("${project.rootDir}/gradle/java-tron.vmoptions") {
        into "bin"
    }
}
//distZip {
//    doLast {
//        file("$destinationDir/$archiveName").renameTo("$destinationDir/"+'java-tron-'+version+'-bin.zip')
//    }
//}
configurations.archives.artifacts.removeAll { it.type == 'tar' }
applicationName = 'java-tron'
startScripts.enabled = false
run.enabled = false
tasks.distTar.enabled = false

createScript(project, 'org.tron.program.FullNode', 'FullNode')

shadowJar {
    baseName = 'FullNode'
    classifier = null
    version = null
    // exclude these files for bouncycastle
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
    mergeServiceFiles() //  https://github.com/grpc/grpc-java/issues/10853
}
shadowDistZip {
    enabled = false
}

startShadowScripts {
    enabled = false
}

tasks.register('copyToParent', Copy) {
    into "../build/distributions"
    from "$buildDir/distributions"
    include "*.zip"
}

build.finalizedBy(copyToParent)
